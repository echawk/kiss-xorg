#!/bin/sh -e

export DESTDIR="$1"

# FIXME: would like to ulitmately remove this ugly, ugly hack.
# Check to make sure that gtk+3 is built with atk support
cat > gtk-atk-test.c <<EOF
#include <gtk/gtk.h>

int main () {
#ifdef GTK_ACCESSIBLE
  return 0;
#else
  return 1;
#endif
}
EOF
# shellcheck disable=2046
"${CC:-cc}" $(pkg-config --cflags gtk+-3.0) gtk-atk-test.c -o gtk-atk-test
if ! ./gtk-atk-test; then
cat <<EOF
You need to rebuild gtk+3 with atk support!

If you are using the version of gtk+3 shipped with kiss-xorg run the following:

$ kiss b gtk+3

And it will automatically pick up the atk dependency.
EOF
    exit 1
fi
rm -v -- gtk-atk-test.c

printf "NOTE: It is HIGHLY recommended to build this package with sane build flags and 'ccache' enabled!\n"

# Glob includes the libstdc++ patchset aswell.
for patch in chromium-*.patch; do
    patch -p1 < "$patch"
done

# Patches relating to libc are conditionally applied to avoid breakage.
kiss list musl && {
    for patch in musl-*.patch; do
        patch -p1 < "$patch"
    done
}

python ungoogled-chromium/utils/prune_binaries.py \
    ./ ungoogled-chromium/pruning.list

# Bypass the Python script and apply patches ourselves to avoid GNU patch.
while read -r patch; do
    [ "$patch" ] || continue
    patch -p1 < "ungoogled-chromium/patches/$patch"
done < ungoogled-chromium/patches/series

python ungoogled-chromium/utils/domain_substitution.py apply \
    -r ungoogled-chromium/domain_regex.list \
    -f ungoogled-chromium/domain_substitution.list \
    -c domainsubcache.tar.gz ./

# Use usb.ids at run time
sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
    services/device/public/cpp/usb/BUILD.gn > _
mv -f _ services/device/public/cpp/usb/BUILD.gn

mkdir -p third_party/node/linux/node-linux-x64/bin
ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

# Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
export CFLAGS="$CFLAGS -Wno-builtin-macro-redefined"
export CXXFLAGS="$CXXFLAGS -Wno-builtin-macro-redefined"
export CPPFLAGS="$CPPFLAGS -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="

# Allow building against system libraries in official builds.
sed 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py > _
mv -f _ tools/generate_shim_headers/generate_shim_headers.py

# Compile gn early, so it can be used to generate gni stuff.
CFLAGS="$CFLAGS -D_LARGEFILE64_SOURCE" \
CXXFLAGS="$CXXFLAGS -D_LARGEFILE64_SOURCE" \
./tools/gn/bootstrap/bootstrap.py \
    --skip-generate-buildfiles

# harfbuzz-ng: syslib broken
# icu: Breakage on updates.
# libevent: Random freezes with javascript.
# libpng: KISS builds with APNG patch (https://crbug.com/752403#c10).
# libvpx: Broken ?
# libxml: bundle as it's only required by browsers
# libxslt: bundle as it's only requred by browsers
# zlib: KISS build without 'minizip'.
system="
    ffmpeg
    flac
    fontconfig
    freetype
    harfbuzz-ng
    libdrm
    libjpeg
    libwebp
    opus
"

# remove build scripts for system provided dependencies - basically does the
# same as the bundled script to remove bundled libs, but this way we don't
# have to list the remaining libs.
for lib in $system libjpeg_turbo; do
    find . -type f -path "*third_party/$lib/*" \
        \! -path "*third_party/$lib/chromium/*" \
        \! -path "*third_party/$lib/google/*" \
        \! -path "./base/third_party/icu/*" \
        \! -path "./third_party/pdfium/third_party/freetype/include/pstables.h" \
        \! -path "./third_party/harfbuzz-ng/utils/hb_scoped.h" \
        \! -name "*.gn" \
        \! -name "*.gni" \
        \! -name "*.isolate" \
        \! -name "*.py" \
        -exec rm -rf {} +
done

# switch to system provided dependencies.
# shellcheck disable=2086
./build/linux/unbundle/replace_gn_files.py --system-libraries $system

./third_party/libaddressinput/chromium/tools/update-strings.py

# 'clang' builds are untested but should most likely work fine with our flags.
case $("$CC" --version) in (*clang*)
    clang=true
    ;;
esac

kiss list pipewire && pipewire=true

conf="
    blink_enable_generated_code_formatting=false
    blink_symbol_level=0
    build_with_tflite_lib=false
    chrome_pgo_phase=0
    clang_base_path=\"/usr\"
    clang_use_chrome_plugins=false
    custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
    disable_fieldtrial_testing_config=true
    enable_hangout_services_extension=false
    enable_mdns=false
    enable_mse_mpeg2ts_stream_parser=true
    enable_nacl=false
    enable_reading_list=false
    enable_remoting=false
    enable_reporting=false
    enable_rust=false
    enable_service_discovery=false
    enable_vr=false
    enable_widevine=false
    exclude_unwind_tables=true
    fatal_linker_warnings=false
    ffmpeg_branding=\"Chrome\"
    google_api_key=\"\"
    google_default_client_id=\"\"
    google_default_client_secret=\"\"
    host_toolchain=\"//build/toolchain/linux/unbundle:default\"
    is_cfi=false
    is_clang=${clang:-false}
    is_debug=false
    is_official_build=true
    link_pulseaudio=false
    ozone_platform_wayland=false
    ozone_platform_x11=true
    proprietary_codecs=true
    rtc_build_examples=false
    rtc_link_pipewire=${pipewire:-false}
    rtc_use_pipewire=${pipewire:-false}
    safe_browsing_mode=0
    symbol_level=0
    treat_warnings_as_errors=false
    use_atk=false
    use_bluez=false
    use_cfi_icall=false
    use_cups=false
    use_custom_libcxx=false
    use_dbus=false
    use_gold=false
    use_kerberos=false
    use_libpci=false
    use_lld=false
    use_official_google_api_keys=false
    use_pulseaudio=false
    use_qt=false
    use_sysroot=false
    use_system_freetype=true
    use_system_harfbuzz=true
    use_system_libdrm=true
    use_system_libffi=true
    use_system_libjpeg=true
    use_system_libwayland=false
    use_system_wayland_scanner=false
    use_thin_lto=false
    use_unofficial_version_number=false
    use_vaapi=true
"

out/Release/gn gen out/Release --args="$conf"

# Attempt to increase file descriptor limit
# as build may exhaust default (1024).
#
# -n is non-POSIX hence we "attempt".
# shellcheck disable=3045
# shellcheck disable=2039
ulimit -n 4096 2>/dev/null || {
    printf "Failed to set ulimit, build will fail!\n" >&2
    exit 1
}

ninja -C out/Release chrome

# Package the monster.
mkdir -p "$1/usr/bin" \
         "$1/usr/lib/chromium/locales"

cp chromium.sh "$1/usr/bin/chromium"

# Fix for Xorg hardware acceleration.
# https://github.com/ehawkvu/kiss-xorg/issues/2
for lib in libEGL.so libGLESv2.so; do
    cp "out/Release/$lib" "$1/usr/lib/chromium/"
done

cd out/Release

cp chrome "$1/usr/lib/chromium/chromium"
cp locales/*.pak "$1/usr/lib/chromium/locales/"
cp -- icudtl.dat *.bin *.pak "$1/usr/lib/chromium/"
